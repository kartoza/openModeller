  <Algorithm  Id="SVM" Version="0.1">
  <Name>SVM Nu-SVC (Support Vector Machines)</Name>
   <Overview>Support vector machines (SVMs) are a set of related supervised learning methods that belong to a family of generalized linear classifiers. They can also be considered a special case of Tikhonov regularization. A special property of SVMs is that they simultaneously minimize the empirical classification error and maximize the geometric margin; hence they are also known as maximum margin classifiers. Content retrieved from Wikipedia on the 13th of June, 2007: http://en.wikipedia.org/w/index.php?title=Support_vector_machine&amp;oldid=136646498.</Overview>
  <Description>Support vector machines map input vectors to a higher dimensional space where a maximal separating hyperplane is constructed. Two parallel hyperplanes are constructed on each side of the hyperplane that separates the data. The separating hyperplane is the hyperplane that maximises the distance between the two parallel hyperplanes. An assumption is made that the larger the margin or distance between these parallel hyperplanes the better the generalisation error of the classifier will be. A version of a SVM for regression was proposed in 1996 by Vladimir Vapnik, Harris Drucker, Chris Burges, Linda Kaufman and Alex Smola. This method is called support vector regression (SVR). The model produced by support vector classification only depends on a subset of the training data, because the cost function for building the model does not care about training points that lie beyond the margin. Analogously, the model produced by SVR only depends on a subset of the training data, because the cost function for building the model ignores any training data that are close (within a threshold) to the model prediction. Content retrieved from Wikipedia on the 13th of June, 2007: http://en.wikipedia.org/w/index.php?title=Support_vector_machine&amp;oldid=136646498. The openModeller implementation of SVMs makes use of the libsvm library: Chih-Chung Chang and Chih-Jen Lin, LIBSVM: a library for support vector machines, 2001. Software available at http://www.csie.ntu.edu.tw/~cjlin/libsvm.</Description>
  <Designers>
    <Designer Name="Vladimir N. Vapnik () () ()" Contact=""/>
  </Designers>
  <Bibliography>1) Vapnik, V. (1995) The Nature of Statistical Learning Theory. SpringerVerlag. 2) Drucker, H., Burges, C.J.C., Kaufman, L., Smola, A., and Vapnik, V. (1997). Support Vector Regression Machines. Advances in Neural Information Processing Systems 9, NIPS 1996, 155-161, MIT Press. 3) Schlkopf, B., Smola, A., Williamson, R. and Bartlett, P.L.(2000). New support vector algorithms. Neural Computation, 12, 1207-1245. 4) Schlkopf, B., Platt, J.C., Shawe-Taylor, J., Smola A.J. and Williamson, R.C. (2001). Estimating the support of a high-dimensional distribution. Neural Computation, 13, 1443-1471. 5) Cristianini, N. &amp; Shawe-Taylor, J. (2000). An Introduction to Support Vector Machines and other kernel-based learning methods. Cambridge University Press.</Bibliography>
  <Developers>
    <Developer Name="Renato De Giovanni" Contact="renato [at] cria . org . br"/>
  </Developers>
  <Guid>-9cce-4a55-a53b-cd8ced74350e</Guid>
  <AcceptsCategoricalMaps>0</AcceptsCategoricalMaps>
  <RequiresAbsencePoints>0</RequiresAbsencePoints>
  <Parameters>
      <Parameter Id="C">
        <Name>Cost</Name>
        <Type>Double</Type>
        <Overview>Cost (only for C-SVC types).</Overview>
        <Description>Cost (only for C-SVC types).</Description>
        <AcceptedRange Min="0.001" Max="2147483647"/>
        <Default>1</Default>
        <Value>1</Value>
      </Parameter>
      <Parameter Id="Coef0">
        <Name>Coef0</Name>
        <Type>Double</Type>
        <Overview>Coef0 in kernel function (only for polynomial kernels).</Overview>
        <Description>Coef0 in kernel function (only for polynomial kernels).</Description>
        <AcceptedRange Min="-2147483648" Max="2147483647"/>
        <Default>0</Default>
        <Value>0</Value>
      </Parameter>
      <Parameter Id="Degree">
        <Name>Degree</Name>
        <Type>Integer</Type>
        <Overview>Degree in kernel function (only for polynomial kernels).</Overview>
        <Description>Degree in kernel function (only for polynomial kernels).</Description>
        <AcceptedRange Min="0" Max="2147483647"/>
        <Default>3</Default>
        <Value>3</Value>
      </Parameter>
      <Parameter Id="Gamma">
        <Name>Gamma</Name>
        <Type>Double</Type>
        <Overview>Gamma in kernel function (only for polynomial and radial basis kernels). When set to zero, the default value will actually be 1/k, where k is the number of layers.</Overview>
        <Description>Gamma in kernel function (only for polynomial and radial basis kernels). When set to zero, the default value will actually be 1/k, where k is the number of layers.</Description>
        <AcceptedRange Min="-2147483648" Max="2147483647"/>
        <Default>0</Default>
        <Value>0</Value>
      </Parameter>
      <Parameter Id="KernelType">
        <Name>Kernel type</Name>
        <Type>Integer</Type>
        <Overview>Type of kernel function: 0 = linear: u'*v , 1 = polynomial: (gamma*u'*v + coef0)^degree , 2 = radial basis function: exp(-gamma*|u-v|^2)</Overview>
        <Description>Type of kernel function: 0 = linear: u'*v , 1 = polynomial: (gamma*u'*v + coef0)^degree , 2 = radial basis function: exp(-gamma*|u-v|^2)</Description>
        <AcceptedRange Min="0" Max="4"/>
        <Default>2</Default>
        <Value>2</Value>
      </Parameter>
      <Parameter Id="Nu">
        <Name>Nu</Name>
        <Type>Double</Type>
        <Overview>Nu (only for Nu-SVC).</Overview>
        <Description>Nu (only for Nu-SVC).</Description>
        <AcceptedRange Min="0.001" Max="1"/>
        <Default>0.5</Default>
        <Value>0.5</Value>
      </Parameter>
      <Parameter Id="ProbabilisticOutput">
        <Name>Probabilistic output</Name>
        <Type>Integer</Type>
        <Overview>Indicates if the output should be a probability instead of a binary response (only available for C-SVC and Nu-SVC).</Overview>
        <Description>Indicates if the output should be a probability instead of a binary response (only available for C-SVC and Nu-SVC).</Description>
        <AcceptedRange Min="0" Max="1"/>
        <Default>1</Default>
        <Value>1</Value>
      </Parameter>
      <Parameter Id="SvmType">
        <Name>SVM type</Name>
        <Type>Integer</Type>
        <Overview>Type of SVM: 0 = C-SVC, 1 = Nu-SVC, 2 = one-class SVM</Overview>
        <Description>Type of SVM: 0 = C-SVC, 1 = Nu-SVC, 2 = one-class SVM</Description>
        <AcceptedRange Min="0" Max="2"/>
        <Default>0</Default>
        <Value>1</Value>
      </Parameter>
    </Parameters>
  </Algorithm>

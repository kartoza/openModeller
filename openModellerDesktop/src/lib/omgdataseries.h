/***************************************************************************
                          omgguid.h  -  description
                             -------------------
    begin                : April 2007
    copyright            : (C) 2007 by Tim Sutton
    email                : tim@linfiniti.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/

#ifndef OMGDATASERIES_H
#define OMGDATASERIES_H

#include <QString>
#include <QPainter>
#include <QLinearGradient>
#include <QList>
#include <QColor>
#include <QPair>
/** \ingroup library
  * \brief A class for for representing a data series in a graph
  * @see OmgGraph
  * @todo make this a template class so it can have double / int etc
  * @author Tim Sutton
  */

class OMG_LIB_EXPORT OmgDataSeries
{
  public:
    /** Constructor . */
    OmgDataSeries();
    /** Desctructor . */
    virtual ~OmgDataSeries();
    /** Operator for appending a new value Y to the series, X will be assigned
     * the value of the length of the new Y list after insert
     * @param theYValue - the new Y value to be appended to the series
     * */
    inline OmgDataSeries &operator<<( const double &theYValue )
    {
      mYList << theYValue;
      mXList << mYList.size()-1;
      return *this;
    };
    /** Operator for appending a new value X,Y to the series.
     * @param a QPair<double,double> containing the x,y values to be added to the 
     * series.
     * */
    inline OmgDataSeries &operator<<( const QPair<double,double>  &thePair )
    {
      mXList << thePair.first;
      mYList << thePair.second;
      return *this;
    };
    /** The number of items in the series
     * @return an integer with the number of data items in the 
     * data series.
     */
    int size() const;
    /** Get the minimum value in the data series X axis
     * @return a double representing the smallest value in the series.
     */
    double xMin() const;
    /** Get the maximum value in the data series X axis
     * @return a double representing the largetst value in the series.
     */
    double xMax() const;
    /** Get the minimum value in the data series Y axis
     * @return a double representing the smallest value in the series.
     */
    double yMin() const;
    /** Get the maximum value in the data series Y axis
     * @return a double representing the largetst value in the series.
     */
    double yMax() const;
    /** Sort the data in the series X value list
     * @param Qt::SortOrder (Qt::AscendingOrder or Qt::DescendingOrder)
     * the order in which the data should be sorted. Default is to
     * do a descending sort.
     * @note The X value list will no longer be syncronised with the 
     *       Y value list after performing the sort!
     */
    void sortX(Qt::SortOrder theOrder=Qt::DescendingOrder);
    /** Sort the data in teh series Y value list
     * @param Qt::SortOrder (Qt::AscendingOrder or Qt::DescendingOrder)
     * the order in which the data should be sorted. Default is to
     * do a descending sort.
     * @note The Y value list will no longer be syncronised with the 
     *       X value list after performing the sort!
     */
    void sortY(Qt::SortOrder theOrder=Qt::DescendingOrder);
    // accessors and mutators
    
    QList<double> yValuesList() const;
    /** \brief Set the list of Y values in the data series. 
     * When using this method, the X values will be autogenerated 
     * using range [0,yValuesList.size()-1]. If you wish to use 
     * this method without disturbing the X values, use 
     * setXYValueLists(QList<double>,QList<double>)
     * @param QList<double> theValues - the list of values to 
     * assign to the Y axis.
     */
    void setYValuesList(QList<double> theValues);
    QList<double> xValuesList() const;
    /** \brief Set the list of X values in the data series. 
     * When using this method, the X values will be autogenerated 
     * using range [0,xValuesList.size()-1]. If you wish to use 
     * this method without disturbing the X values, use 
     * setXYValueLists(QList<double>,QList<double>)
     * @param QList<double> theValues - the list of values to 
     * assign to the Y axis.
     */
    void setXValuesList(QList<double> theValues);
    /** Set the x and y value lists
     * @param QList<double> theXValues - the list of values to 
     * assign to the Y axis.
     * @param QList<double> theYValues - the list of values to 
     * assign to the Y axis.
     */
    void setXYValueLists(QList<double> theXValues,QList<double> theYValues);
    /** The value of the x axis at the given position.
     * @param thePos - the item no in the x axisy to return.
     */
    double xAt(int thePosition);
    /** The value of the y axis at the given position.
     * @param thePos - the item no in the y axis to return.
     */
    double yAt(int thePosition);
    QString xLabel();
    void setXLabel(QString theLabel);
    QString yLabel();
    void setYLabel(QString theLabel);
    QString label();
    void setLabel(QString theLabel);
    QColor lineColor();
    void setLineColor(QColor theColor);
    QColor fillColor();
    void setFillColor(QColor theColor);
  private:

    //
    // data members
    //
    QString mXLabel;
    QString mYLabel;
    QString mLabel;
    QList <double> mYList;
    QList <double> mXList;
    QColor mLineColor;
    QColor mFillColor;
};

#endif //OMGDATASERIES_H

